components:
  schemas:
    ChatCompletionFunctionCallOption:
      description: |
        Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
      properties:
        name:
          description: The name of the function to call.
          type: string
      required:
        - name
      type: object
    ChatCompletionFunctions:
      deprecated: true
      properties:
        description:
          description: A description of what the function does, used by the model to choose when and how to call the function.
          type: string
        name:
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
          type: string
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
      required:
        - name
      type: object
    ChatCompletionMessageToolCall:
      properties:
        function:
          description: The function that the model called.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
            - name
            - arguments
          type: object
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - function
      type: object
    ChatCompletionMessageToolCallChunk:
      properties:
        function:
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          type: object
        id:
          description: The ID of the tool call.
          type: string
        index:
          type: integer
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - index
      type: object
    ChatCompletionMessageToolCalls:
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
      type: array
    ChatCompletionNamedToolChoice:
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
      properties:
        function:
          properties:
            name:
              description: The name of the function to call.
              type: string
          required:
            - name
          type: object
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - type
        - function
      type: object
    ChatCompletionRequestAssistantMessage:
      description: |
        Messages sent by the model in response to user messages.
      properties:
        audio:
          description: "Data about a previous audio response from the model. \n[Learn more](/docs/guides/audio).\n"
          nullable: true
          properties:
            id:
              description: |
                Unique identifier for a previous audio response from the model.
              type: string
          required:
            - id
          type: object
        content:
          description: |
            The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
          nullable: true
          oneOf:
            - description: The contents of the assistant message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestAssistantMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          nullable: true
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
            - arguments
            - name
          type: object
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        refusal:
          description: The refusal message by the assistant.
          nullable: true
          type: string
        role:
          description: The role of the messages author, in this case `assistant`.
          enum:
            - assistant
          type: string
          x-stainless-const: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
      required:
        - role
      title: Assistant message
      type: object
    ChatCompletionRequestAssistantMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartRefusal'
    ChatCompletionRequestDeveloperMessage:
      description: |
        Developer-provided instructions that the model should follow, regardless of
        messages sent by the user. With o1 models and newer, `developer` messages
        replace the previous `system` messages.
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
            - description: The contents of the developer message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. For developer messages, only type `text` is supported.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
              minItems: 1
              title: Array of content parts
              type: array
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `developer`.
          enum:
            - developer
          type: string
          x-stainless-const: true
      required:
        - content
        - role
      title: Developer message
      type: object
    ChatCompletionRequestFunctionMessage:
      deprecated: true
      properties:
        content:
          description: The contents of the function message.
          nullable: true
          type: string
        name:
          description: The name of the function to call.
          type: string
        role:
          description: The role of the messages author, in this case `function`.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - role
        - content
        - name
      title: Function message
      type: object
    ChatCompletionRequestMessage:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestDeveloperMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
    ChatCompletionRequestMessageContentPartAudio:
      description: |
        Learn about [audio inputs](/docs/guides/audio).
      properties:
        input_audio:
          properties:
            data:
              description: Base64 encoded audio data.
              type: string
            format:
              description: |
                The format of the encoded audio data. Currently supports "wav" and "mp3".
              enum:
                - wav
                - mp3
              type: string
          required:
            - data
            - format
          type: object
        type:
          description: The type of the content part. Always `input_audio`.
          enum:
            - input_audio
          type: string
          x-stainless-const: true
      required:
        - type
        - input_audio
      title: Audio content part
      type: object
    ChatCompletionRequestMessageContentPartFile:
      description: |
        Learn about [file inputs](/docs/guides/text) for text generation.
      properties:
        file:
          properties:
            file_data:
              description: "The base64 encoded file data, used when passing the file to the model \nas a string.\n"
              type: string
            file_id:
              description: |
                The ID of an uploaded file to use as input.
              type: string
            filename:
              description: "The name of the file, used when passing the file to the model as a \nstring.\n"
              type: string
          type: object
        type:
          description: The type of the content part. Always `file`.
          enum:
            - file
          type: string
          x-stainless-const: true
      required:
        - type
        - file
      title: File content part
      type: object
    ChatCompletionRequestMessageContentPartImage:
      description: |
        Learn about [image inputs](/docs/guides/vision).
      properties:
        image_url:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
              enum:
                - auto
                - low
                - high
              type: string
            url:
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
              type: string
          required:
            - url
          type: object
        type:
          description: The type of the content part.
          enum:
            - image_url
          type: string
          x-stainless-const: true
      required:
        - type
        - image_url
      title: Image content part
      type: object
    ChatCompletionRequestMessageContentPartRefusal:
      properties:
        refusal:
          description: The refusal message generated by the model.
          type: string
        type:
          description: The type of the content part.
          enum:
            - refusal
          type: string
          x-stainless-const: true
      required:
        - type
        - refusal
      title: Refusal content part
      type: object
    ChatCompletionRequestMessageContentPartText:
      description: |
        Learn about [text inputs](/docs/guides/text-generation).
      properties:
        text:
          description: The text content.
          type: string
        type:
          description: The type of the content part.
          enum:
            - text
          type: string
          x-stainless-const: true
      required:
        - type
        - text
      title: Text content part
      type: object
    ChatCompletionRequestSystemMessage:
      description: |
        Developer-provided instructions that the model should follow, regardless of
        messages sent by the user. With o1 models and newer, use `developer` messages
        for this purpose instead.
      properties:
        content:
          description: The contents of the system message.
          oneOf:
            - description: The contents of the system message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. For system messages, only type `text` is supported.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestSystemMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `system`.
          enum:
            - system
          type: string
          x-stainless-const: true
      required:
        - content
        - role
      title: System message
      type: object
    ChatCompletionRequestSystemMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
    ChatCompletionRequestToolMessage:
      properties:
        content:
          description: The contents of the tool message.
          oneOf:
            - description: The contents of the tool message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. For tool messages, only type `text` is supported.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestToolMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
        role:
          description: The role of the messages author, in this case `tool`.
          enum:
            - tool
          type: string
          x-stainless-const: true
        tool_call_id:
          description: Tool call that this message is responding to.
          type: string
      required:
        - role
        - content
        - tool_call_id
      title: Tool message
      type: object
    ChatCompletionRequestToolMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
    ChatCompletionRequestUserMessage:
      description: |
        Messages sent by an end user, containing prompts or additional context
        information.
      properties:
        content:
          description: |
            The contents of the user message.
          oneOf:
            - description: The text contents of the message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestUserMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `user`.
          enum:
            - user
          type: string
          x-stainless-const: true
      required:
        - content
        - role
      title: User message
      type: object
    ChatCompletionRequestUserMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartAudio'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartFile'
    ChatCompletionResponseMessage:
      description: A chat completion message generated by the model.
      properties:
        annotations:
          description: |
            Annotations for the message, when applicable, as when using the
            [web search tool](/docs/guides/tools-web-search?api-mode=chat).
          items:
            description: |
              A URL citation when using web search.
            properties:
              type:
                description: The type of the URL citation. Always `url_citation`.
                enum:
                  - url_citation
                type: string
                x-stainless-const: true
              url_citation:
                description: A URL citation when using web search.
                properties:
                  end_index:
                    description: The index of the last character of the URL citation in the message.
                    type: integer
                  start_index:
                    description: The index of the first character of the URL citation in the message.
                    type: integer
                  title:
                    description: The title of the web resource.
                    type: string
                  url:
                    description: The URL of the web resource.
                    type: string
                required:
                  - end_index
                  - start_index
                  - url
                  - title
                type: object
            required:
              - type
              - url_citation
            type: object
          type: array
        audio:
          description: |
            If the audio output modality is requested, this object contains data
            about the audio response from the model. [Learn more](/docs/guides/audio).
          nullable: true
          properties:
            data:
              description: |
                Base64 encoded audio bytes generated by the model, in the format
                specified in the request.
              type: string
            expires_at:
              description: |
                The Unix timestamp (in seconds) for when this audio response will
                no longer be accessible on the server for use in multi-turn
                conversations.
              type: integer
            id:
              description: Unique identifier for this audio response.
              type: string
            transcript:
              description: Transcript of the audio generated by the model.
              type: string
          required:
            - id
            - expires_at
            - data
            - transcript
          type: object
        content:
          description: The contents of the message.
          nullable: true
          type: string
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
            - name
            - arguments
          type: object
        refusal:
          description: The refusal message generated by the model.
          nullable: true
          type: string
        role:
          description: The role of the author of this message.
          enum:
            - assistant
          type: string
          x-stainless-const: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
      required:
        - role
        - content
        - refusal
      type: object
    ChatCompletionStreamOptions:
      description: |
        Options for streaming response. Only set this when you set `stream: true`.
      nullable: true
      properties:
        include_usage:
          description: "If set, an additional chunk will be streamed before the `data: [DONE]`\nmessage. The `usage` field on this chunk shows the token usage statistics\nfor the entire request, and the `choices` field will always be an empty\narray. \n\nAll other chunks will also include a `usage` field, but with a null\nvalue. **NOTE:** If the stream is interrupted, you may not receive the\nfinal usage chunk which contains the total token usage for the request.\n"
          type: boolean
      type: object
    ChatCompletionStreamResponseDelta:
      description: A chat completion delta generated by streamed model responses.
      properties:
        content:
          description: The contents of the chunk message.
          nullable: true
          type: string
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          type: object
        refusal:
          description: The refusal message generated by the model.
          nullable: true
          type: string
        role:
          description: The role of the author of this message.
          enum:
            - developer
            - system
            - user
            - assistant
            - tool
          type: string
        tool_calls:
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
          type: array
      type: object
    ChatCompletionTokenLogprob:
      properties:
        bytes:
          description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
          items:
            type: integer
          nullable: true
          type: array
        logprob:
          description: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
          type: number
        token:
          description: The token.
          type: string
        top_logprobs:
          description: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
          items:
            properties:
              bytes:
                description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                items:
                  type: integer
                nullable: true
                type: array
              logprob:
                description: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
                type: number
              token:
                description: The token.
                type: string
            required:
              - token
              - logprob
              - bytes
            type: object
          type: array
      required:
        - token
        - logprob
        - bytes
        - top_logprobs
      type: object
    ChatCompletionTool:
      properties:
        function:
          $ref: '#/components/schemas/FunctionObject'
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - type
        - function
      type: object
    ChatCompletionToolChoiceOption:
      description: |
        Controls which (if any) tool is called by the model.
        `none` means the model will not call any tool and instead generates a message.
        `auto` means the model can pick between generating a message or calling one or more tools.
        `required` means the model must call one or more tools.
        Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.

        `none` is the default when no tools are present. `auto` is the default if tools are present.
      oneOf:
        - description: |
            `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
          enum:
            - none
            - auto
            - required
          type: string
        - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
    CompletionUsage:
      description: Usage statistics for the completion request.
      properties:
        completion_tokens:
          default: 0
          description: Number of tokens in the generated completion.
          type: integer
        completion_tokens_details:
          description: Breakdown of tokens used in a completion.
          properties:
            accepted_prediction_tokens:
              default: 0
              description: |
                When using Predicted Outputs, the number of tokens in the
                prediction that appeared in the completion.
              type: integer
            audio_tokens:
              default: 0
              description: Audio input tokens generated by the model.
              type: integer
            reasoning_tokens:
              default: 0
              description: Tokens generated by the model for reasoning.
              type: integer
            rejected_prediction_tokens:
              default: 0
              description: |
                When using Predicted Outputs, the number of tokens in the
                prediction that did not appear in the completion. However, like
                reasoning tokens, these tokens are still counted in the total
                completion tokens for purposes of billing, output, and context window
                limits.
              type: integer
          type: object
        prompt_tokens:
          default: 0
          description: Number of tokens in the prompt.
          type: integer
        prompt_tokens_details:
          description: Breakdown of tokens used in the prompt.
          properties:
            audio_tokens:
              default: 0
              description: Audio input tokens present in the prompt.
              type: integer
            cached_tokens:
              default: 0
              description: Cached tokens present in the prompt.
              type: integer
          type: object
        total_tokens:
          default: 0
          description: Total number of tokens used in the request (prompt + completion).
          type: integer
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
    CreateChatCompletionRequest:
      allOf:
        - $ref: '#/components/schemas/CreateModelResponseProperties'
        - properties:
            audio:
              description: |
                Parameters for audio output. Required when audio output is requested with
                `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
              nullable: true
              properties:
                format:
                  description: |
                    Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                    `opus`, or `pcm16`.
                  enum:
                    - wav
                    - aac
                    - mp3
                    - flac
                    - opus
                    - pcm16
                  type: string
                voice:
                  $ref: '#/components/schemas/VoiceIdsShared'
              required:
                - voice
                - format
              type: object
            frequency_penalty:
              default: 0
              description: |
                Number between -2.0 and 2.0. Positive values penalize new tokens based on
                their existing frequency in the text so far, decreasing the model's
                likelihood to repeat the same line verbatim.
              maximum: 2
              minimum: -2
              nullable: true
              type: number
            function_call:
              deprecated: true
              description: |
                Deprecated in favor of `tool_choice`.

                Controls which (if any) function is called by the model.

                `none` means the model will not call a function and instead generates a
                message.

                `auto` means the model can pick between generating a message or calling a
                function.

                Specifying a particular function via `{"name": "my_function"}` forces the
                model to call that function.

                `none` is the default when no functions are present. `auto` is the default
                if functions are present.
              oneOf:
                - description: |
                    `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                  enum:
                    - none
                    - auto
                  type: string
                - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
            functions:
              deprecated: true
              description: |
                Deprecated in favor of `tools`.

                A list of functions the model may generate JSON inputs for.
              items:
                $ref: '#/components/schemas/ChatCompletionFunctions'
              maxItems: 128
              minItems: 1
              type: array
            logit_bias:
              additionalProperties:
                type: integer
              description: |
                Modify the likelihood of specified tokens appearing in the completion.

                Accepts a JSON object that maps tokens (specified by their token ID in the
                tokenizer) to an associated bias value from -100 to 100. Mathematically,
                the bias is added to the logits generated by the model prior to sampling.
                The exact effect will vary per model, but values between -1 and 1 should
                decrease or increase likelihood of selection; values like -100 or 100
                should result in a ban or exclusive selection of the relevant token.
              nullable: true
              type: object
              x-oaiTypeLabel: map
            logprobs:
              default: false
              description: |
                Whether to return log probabilities of the output tokens or not. If true,
                returns the log probabilities of each output token returned in the
                `content` of `message`.
              nullable: true
              type: boolean
            max_completion_tokens:
              description: |
                An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
              nullable: true
              type: integer
            max_tokens:
              deprecated: true
              description: |
                The maximum number of [tokens](/tokenizer) that can be generated in the
                chat completion. This value can be used to control
                [costs](https://openai.com/api/pricing/) for text generated via API.

                This value is now deprecated in favor of `max_completion_tokens`, and is
                not compatible with [o-series models](/docs/guides/reasoning).
              nullable: true
              type: integer
            messages:
              description: |
                A list of messages comprising the conversation so far. Depending on the
                [model](/docs/models) you use, different message types (modalities) are
                supported, like [text](/docs/guides/text-generation),
                [images](/docs/guides/vision), and [audio](/docs/guides/audio).
              items:
                $ref: '#/components/schemas/ChatCompletionRequestMessage'
              minItems: 1
              type: array
            modalities:
              $ref: '#/components/schemas/ResponseModalities'
            model:
              $ref: '#/components/schemas/ModelIdsShared'
            "n":
              default: 1
              description: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
              example: 1
              maximum: 128
              minimum: 1
              nullable: true
              type: integer
            parallel_tool_calls:
              $ref: '#/components/schemas/ParallelToolCalls'
            prediction:
              description: |
                Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
                which can greatly improve response times when large parts of the model
                response are known ahead of time. This is most common when you are
                regenerating a file with only minor changes to most of the content.
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/PredictionContent'
            presence_penalty:
              default: 0
              description: |
                Number between -2.0 and 2.0. Positive values penalize new tokens based on
                whether they appear in the text so far, increasing the model's likelihood
                to talk about new topics.
              maximum: 2
              minimum: -2
              nullable: true
              type: number
            reasoning_effort:
              $ref: '#/components/schemas/ReasoningEffort'
            response_format:
              description: |
                An object specifying the format that the model must output.

                Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
                Structured Outputs which ensures the model will match your supplied JSON
                schema. Learn more in the [Structured Outputs
                guide](/docs/guides/structured-outputs).

                Setting to `{ "type": "json_object" }` enables the older JSON mode, which
                ensures the message the model generates is valid JSON. Using `json_schema`
                is preferred for models that support it.
              oneOf:
                - $ref: '#/components/schemas/ResponseFormatText'
                - $ref: '#/components/schemas/ResponseFormatJsonSchema'
                - $ref: '#/components/schemas/ResponseFormatJsonObject'
            seed:
              description: |
                This feature is in Beta.
                If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
                Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
              maximum: 9.223372036854776e+18
              minimum: -9.223372036854776e+18
              nullable: true
              type: integer
              x-oaiMeta:
                beta: true
            stop:
              $ref: '#/components/schemas/StopConfiguration'
            store:
              default: false
              description: "Whether or not to store the output of this chat completion request for \nuse in our [model distillation](/docs/guides/distillation) or\n[evals](/docs/guides/evals) products.\n"
              nullable: true
              type: boolean
            stream:
              default: false
              description: |
                If set to true, the model response data will be streamed to the client
                as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
                See the [Streaming section below](/docs/api-reference/chat/streaming)
                for more information, along with the [streaming responses](/docs/guides/streaming-responses)
                guide for more information on how to handle the streaming events.
              nullable: true
              type: boolean
            stream_options:
              $ref: '#/components/schemas/ChatCompletionStreamOptions'
            tool_choice:
              $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
            tools:
              description: |
                A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
              items:
                $ref: '#/components/schemas/ChatCompletionTool'
              type: array
            top_logprobs:
              description: |
                An integer between 0 and 20 specifying the number of most likely tokens to
                return at each token position, each with an associated log probability.
                `logprobs` must be set to `true` if this parameter is used.
              maximum: 20
              minimum: 0
              nullable: true
              type: integer
            web_search_options:
              description: |
                This tool searches the web for relevant results to use in a response.
                Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).
              properties:
                search_context_size:
                  $ref: '#/components/schemas/WebSearchContextSize'
                user_location:
                  description: |
                    Approximate location parameters for the search.
                  nullable: true
                  properties:
                    approximate:
                      $ref: '#/components/schemas/WebSearchLocation'
                    type:
                      description: |
                        The type of location approximation. Always `approximate`.
                      enum:
                        - approximate
                      type: string
                      x-stainless-const: true
                  required:
                    - type
                    - approximate
                  type: object
              title: Web search
              type: object
          required:
            - model
            - messages
          type: object
    CreateChatCompletionResponse:
      description: Represents a chat completion response returned by model, based on the provided input.
      properties:
        choices:
          description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
          items:
            properties:
              finish_reason:
                description: |
                  The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                  `length` if the maximum number of tokens specified in the request was reached,
                  `content_filter` if content was omitted due to a flag from our content filters,
                  `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                type: string
              index:
                description: The index of the choice in the list of choices.
                type: integer
              logprobs:
                description: Log probability information for the choice.
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                  refusal:
                    description: A list of message refusal tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                required:
                  - content
                  - refusal
                type: object
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
            required:
              - finish_reason
              - index
              - message
              - logprobs
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion was created.
          type: integer
        id:
          description: A unique identifier for the chat completion.
          type: string
        model:
          description: The model used for the chat completion.
          type: string
        object:
          description: The object type, which is always `chat.completion`.
          enum:
            - chat.completion
          type: string
          x-stainless-const: true
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        system_fingerprint:
          description: |
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
        - choices
        - created
        - id
        - model
        - object
      type: object
      x-oaiMeta:
        example: |
          {
            "id": "chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG",
            "object": "chat.completion",
            "created": 1741570283,
            "model": "gpt-4o-2024-08-06",
            "choices": [
              {
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": "The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.",
                  "refusal": null,
                  "annotations": []
                },
                "logprobs": null,
                "finish_reason": "stop"
              }
            ],
            "usage": {
              "prompt_tokens": 1117,
              "completion_tokens": 46,
              "total_tokens": 1163,
              "prompt_tokens_details": {
                "cached_tokens": 0,
                "audio_tokens": 0
              },
              "completion_tokens_details": {
                "reasoning_tokens": 0,
                "audio_tokens": 0,
                "accepted_prediction_tokens": 0,
                "rejected_prediction_tokens": 0
              }
            },
            "service_tier": "default",
            "system_fingerprint": "fp_fc9f1d7035"
          }
        group: chat
        name: The chat completion object
    CreateChatCompletionStreamResponse:
      description: "Represents a streamed chunk of a chat completion response returned\nby the model, based on the provided input. \n[Learn more](/docs/guides/streaming-responses).\n"
      properties:
        choices:
          description: |
            A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            last chunk if you set `stream_options: {"include_usage": true}`.
          items:
            properties:
              delta:
                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
              finish_reason:
                description: |
                  The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                  `length` if the maximum number of tokens specified in the request was reached,
                  `content_filter` if content was omitted due to a flag from our content filters,
                  `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                nullable: true
                type: string
              index:
                description: The index of the choice in the list of choices.
                type: integer
              logprobs:
                description: Log probability information for the choice.
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                  refusal:
                    description: A list of message refusal tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                required:
                  - content
                  - refusal
                type: object
            required:
              - delta
              - finish_reason
              - index
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
          type: integer
        id:
          description: A unique identifier for the chat completion. Each chunk has the same ID.
          type: string
        model:
          description: The model to generate the completion.
          type: string
        object:
          description: The object type, which is always `chat.completion.chunk`.
          enum:
            - chat.completion.chunk
          type: string
          x-stainless-const: true
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        system_fingerprint:
          description: |
            This fingerprint represents the backend configuration that the model runs with.
            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
        - choices
        - created
        - id
        - model
        - object
      type: object
      x-oaiMeta:
        example: |
          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

          ....

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
        group: chat
        name: The chat completion chunk object
    CreateModelResponseProperties:
      allOf:
        - $ref: '#/components/schemas/ModelResponseProperties'
    FunctionObject:
      properties:
        description:
          description: A description of what the function does, used by the model to choose when and how to call the function.
          type: string
        name:
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
          type: string
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
        strict:
          default: false
          description: Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
          nullable: true
          type: boolean
      required:
        - name
      type: object
    FunctionParameters:
      additionalProperties: true
      description: "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
      type: object
    Metadata:
      additionalProperties:
        type: string
      description: "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n"
      nullable: true
      type: object
      x-oaiTypeLabel: map
    ModelIdsShared:
      anyOf:
        - type: string
        - enum:
            - gpt-4.1
            - gpt-4.1-mini
            - gpt-4.1-nano
            - gpt-4.1-2025-04-14
            - gpt-4.1-mini-2025-04-14
            - gpt-4.1-nano-2025-04-14
            - o4-mini
            - o4-mini-2025-04-16
            - o3
            - o3-2025-04-16
            - o3-mini
            - o3-mini-2025-01-31
            - o1
            - o1-2024-12-17
            - o1-preview
            - o1-preview-2024-09-12
            - o1-mini
            - o1-mini-2024-09-12
            - gpt-4o
            - gpt-4o-2024-11-20
            - gpt-4o-2024-08-06
            - gpt-4o-2024-05-13
            - gpt-4o-audio-preview
            - gpt-4o-audio-preview-2024-10-01
            - gpt-4o-audio-preview-2024-12-17
            - gpt-4o-mini-audio-preview
            - gpt-4o-mini-audio-preview-2024-12-17
            - gpt-4o-search-preview
            - gpt-4o-mini-search-preview
            - gpt-4o-search-preview-2025-03-11
            - gpt-4o-mini-search-preview-2025-03-11
            - chatgpt-4o-latest
            - gpt-4o-mini
            - gpt-4o-mini-2024-07-18
            - gpt-4-turbo
            - gpt-4-turbo-2024-04-09
            - gpt-4-0125-preview
            - gpt-4-turbo-preview
            - gpt-4-1106-preview
            - gpt-4-vision-preview
            - gpt-4
            - gpt-4-0314
            - gpt-4-0613
            - gpt-4-32k
            - gpt-4-32k-0314
            - gpt-4-32k-0613
            - gpt-3.5-turbo
            - gpt-3.5-turbo-16k
            - gpt-3.5-turbo-0301
            - gpt-3.5-turbo-0613
            - gpt-3.5-turbo-1106
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-16k-0613
          type: string
      example: gpt-4o
    ModelResponseProperties:
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        temperature:
          default: 1
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            We generally recommend altering this or `top_p` but not both.
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: |
            An alternative to sampling with temperature, called nucleus sampling,
            where the model considers the results of the tokens with top_p probability
            mass. So 0.1 means only the tokens comprising the top 10% probability mass
            are considered.

            We generally recommend altering this or `temperature` but not both.
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        user:
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
          example: user-1234
          type: string
      type: object
    ParallelToolCalls:
      default: true
      description: Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
      type: boolean
    PredictionContent:
      description: |
        Static predicted output content, such as the content of a text file that is
        being regenerated.
      properties:
        content:
          description: |
            The content that should be matched when generating a model response.
            If generated tokens would match this content, the entire model response
            can be returned much more quickly.
          oneOf:
            - description: |
                The content used for a Predicted Output. This is often the
                text of a file you are regenerating with minor changes.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
              minItems: 1
              title: Array of content parts
              type: array
        type:
          description: |
            The type of the predicted content you want to provide. This type is
            currently always `content`.
          enum:
            - content
          type: string
          x-stainless-const: true
      required:
        - type
        - content
      title: Static Content
      type: object
    ReasoningEffort:
      default: medium
      description: "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
      enum:
        - low
        - medium
        - high
      nullable: true
      type: string
    ResponseFormatJsonObject:
      description: |
        JSON object response format. An older method of generating JSON responses.
        Using `json_schema` is recommended for models that support it. Note that the
        model will not generate JSON without a system or user message instructing it
        to do so.
      properties:
        type:
          description: The type of response format being defined. Always `json_object`.
          enum:
            - json_object
          type: string
          x-stainless-const: true
      required:
        - type
      title: JSON object
      type: object
    ResponseFormatJsonSchema:
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
      properties:
        json_schema:
          description: |
            Structured Outputs configuration options, including a JSON Schema.
          properties:
            description:
              description: |
                A description of what the response format is for, used by the model to
                determine how to respond in the format.
              type: string
            name:
              description: |
                The name of the response format. Must be a-z, A-Z, 0-9, or contain
                underscores and dashes, with a maximum length of 64.
              type: string
            schema:
              $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
            strict:
              default: false
              description: |
                Whether to enable strict schema adherence when generating the output.
                If set to true, the model will always follow the exact schema defined
                in the `schema` field. Only a subset of JSON Schema is supported when
                `strict` is `true`. To learn more, read the [Structured Outputs
                guide](/docs/guides/structured-outputs).
              nullable: true
              type: boolean
          required:
            - name
          title: JSON schema
          type: object
        type:
          description: The type of response format being defined. Always `json_schema`.
          enum:
            - json_schema
          type: string
          x-stainless-const: true
      required:
        - type
        - json_schema
      title: JSON schema
      type: object
    ResponseFormatJsonSchemaSchema:
      additionalProperties: true
      description: |
        The schema for the response format, described as a JSON Schema object.
        Learn how to build JSON schemas [here](https://json-schema.org/).
      title: JSON schema
      type: object
    ResponseFormatText:
      description: |
        Default response format. Used to generate text responses.
      properties:
        type:
          description: The type of response format being defined. Always `text`.
          enum:
            - text
          type: string
          x-stainless-const: true
      required:
        - type
      title: Text
      type: object
    ResponseModalities:
      description: "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio). To request that this model generate \nboth text and audio responses, you can use:\n\n`[\"text\", \"audio\"]`\n"
      items:
        enum:
          - text
          - audio
        type: string
      nullable: true
      type: array
    ServiceTier:
      default: auto
      description: |
        Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
          - If set to 'auto', and the Project is Scale tier enabled, the system
            will utilize scale tier credits until they are exhausted.
          - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
          - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
          - If set to 'flex', the request will be processed with the Flex Processing service tier. [Learn more](/docs/guides/flex-processing).
          - When not set, the default behavior is 'auto'.

          When this parameter is set, the response body will include the `service_tier` utilized.
      enum:
        - auto
        - default
        - flex
      nullable: true
      type: string
    StopConfiguration:
      description: |
        Not supported with latest reasoning models `o3` and `o4-mini`.

        Up to 4 sequences where the API will stop generating further tokens. The
        returned text will not contain the stop sequence.
      nullable: true
      oneOf:
        - default: <|endoftext|>
          example: |2+
          nullable: true
          type: string
        - items:
            example: '["\n"]'
            type: string
          maxItems: 4
          minItems: 1
          type: array
    VoiceIdsShared:
      anyOf:
        - type: string
        - enum:
            - alloy
            - ash
            - ballad
            - coral
            - echo
            - fable
            - onyx
            - nova
            - sage
            - shimmer
            - verse
          type: string
      example: ash
    WebSearchContextSize:
      default: medium
      description: "High level guidance for the amount of context window space to use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the default.\n"
      enum:
        - low
        - medium
        - high
      type: string
    WebSearchLocation:
      description: Approximate location parameters for the search.
      properties:
        city:
          description: |
            Free text input for the city of the user, e.g. `San Francisco`.
          type: string
        country:
          description: "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,\ne.g. `US`.\n"
          type: string
        region:
          description: |
            Free text input for the region of the user, e.g. `California`.
          type: string
        timezone:
          description: "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) \nof the user, e.g. `America/Los_Angeles`.\n"
          type: string
      title: Web search location
      type: object
  securitySchemes:
    ApiKeyAuth:
      scheme: bearer
      type: http
info:
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
  termsOfService: https://openai.com/policies/terms-of-use
  title: OpenAI API
  version: 2.3.0
openapi: 3.0.0
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionStreamResponse'
          description: OK
      summary: "**Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) \nto take advantage of the latest OpenAI platform features. Compare\n[Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).\n\n---\n\nCreates a model response for the given chat conversation. Learn more in the\n[text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),\nand [audio](/docs/guides/audio) guides.\n\nParameter support can differ depending on the model used to generate the\nresponse, particularly for newer reasoning models. Parameters that are only\nsupported for reasoning models are noted below. For the current state of \nunsupported parameters in reasoning models, \n[refer to the reasoning guide](/docs/guides/reasoning).\n"
      tags:
        - Chat
      x-oaiMeta:
        examples:
          - request:
              csharp: |
                using System;
                using System.Collections.Generic;

                using OpenAI.Chat;

                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                List<ChatMessage> messages =
                [
                    new SystemChatMessage("You are a helpful assistant."),
                    new UserChatMessage("Hello!")
                ];

                ChatCompletion completion = client.CompleteChat(messages);

                Console.WriteLine(completion.Content[0].Text);
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_chat_model_id",
                    "messages": [
                      {
                        "role": "developer",
                        "content": "You are a helpful assistant."
                      },
                      {
                        "role": "user",
                        "content": "Hello!"
                      }
                    ]
                  }'
              node.js: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                async function main() {
                  const completion = await openai.chat.completions.create({
                    messages: [{ role: "developer", content: "You are a helpful assistant." }],
                    model: "VAR_chat_model_id",
                    store: true,
                  });

                  console.log(completion.choices[0]);
                }

                main();
              python: |
                from openai import OpenAI
                client = OpenAI()

                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=[
                    {"role": "developer", "content": "You are a helpful assistant."},
                    {"role": "user", "content": "Hello!"}
                  ]
                )

                print(completion.choices[0].message)
            response: |
              {
                "id": "chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT",
                "object": "chat.completion",
                "created": 1741569952,
                "model": "gpt-4.1-2025-04-14",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": "Hello! How can I assist you today?",
                      "refusal": null,
                      "annotations": []
                    },
                    "logprobs": null,
                    "finish_reason": "stop"
                  }
                ],
                "usage": {
                  "prompt_tokens": 19,
                  "completion_tokens": 10,
                  "total_tokens": 29,
                  "prompt_tokens_details": {
                    "cached_tokens": 0,
                    "audio_tokens": 0
                  },
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "audio_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                },
                "service_tier": "default"
              }
            title: Default
          - request:
              csharp: |
                using System;
                using System.Collections.Generic;

                using OpenAI.Chat;

                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                List<ChatMessage> messages =
                [
                    new UserChatMessage(
                    [
                        ChatMessageContentPart.CreateTextPart("What's in this image?"),
                        ChatMessageContentPart.CreateImagePart(new Uri("https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"))
                    ])
                ];

                ChatCompletion completion = client.CompleteChat(messages);

                Console.WriteLine(completion.Content[0].Text);
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "gpt-4.1",
                    "messages": [
                      {
                        "role": "user",
                        "content": [
                          {
                            "type": "text",
                            "text": "What is in this image?"
                          },
                          {
                            "type": "image_url",
                            "image_url": {
                              "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                            }
                          }
                        ]
                      }
                    ],
                    "max_tokens": 300
                  }'
              node.js: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                async function main() {
                  const response = await openai.chat.completions.create({
                    model: "gpt-4.1",
                    messages: [
                      {
                        role: "user",
                        content: [
                          { type: "text", text: "What's in this image?" },
                          {
                            type: "image_url",
                            image_url: {
                              "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                            },
                          }
                        ],
                      },
                    ],
                  });
                  console.log(response.choices[0]);
                }
                main();
              python: |
                from openai import OpenAI

                client = OpenAI()

                response = client.chat.completions.create(
                    model="gpt-4.1",
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": "What's in this image?"},
                                {
                                    "type": "image_url",
                                    "image_url": {
                                        "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                    }
                                },
                            ],
                        }
                    ],
                    max_tokens=300,
                )

                print(response.choices[0])
            response: |
              {
                "id": "chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG",
                "object": "chat.completion",
                "created": 1741570283,
                "model": "gpt-4.1-2025-04-14",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": "The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.",
                      "refusal": null,
                      "annotations": []
                    },
                    "logprobs": null,
                    "finish_reason": "stop"
                  }
                ],
                "usage": {
                  "prompt_tokens": 1117,
                  "completion_tokens": 46,
                  "total_tokens": 1163,
                  "prompt_tokens_details": {
                    "cached_tokens": 0,
                    "audio_tokens": 0
                  },
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "audio_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                },
                "service_tier": "default"
              }
            title: Image input
          - request:
              csharp: |
                using System;
                using System.ClientModel;
                using System.Collections.Generic;
                using System.Threading.Tasks;

                using OpenAI.Chat;

                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                List<ChatMessage> messages =
                [
                    new SystemChatMessage("You are a helpful assistant."),
                    new UserChatMessage("Hello!")
                ];

                AsyncCollectionResult<StreamingChatCompletionUpdate> completionUpdates = client.CompleteChatStreamingAsync(messages);

                await foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)
                {
                    if (completionUpdate.ContentUpdate.Count > 0)
                    {
                        Console.Write(completionUpdate.ContentUpdate[0].Text);
                    }
                }
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_chat_model_id",
                    "messages": [
                      {
                        "role": "developer",
                        "content": "You are a helpful assistant."
                      },
                      {
                        "role": "user",
                        "content": "Hello!"
                      }
                    ],
                    "stream": true
                  }'
              node.js: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                async function main() {
                  const completion = await openai.chat.completions.create({
                    model: "VAR_chat_model_id",
                    messages: [
                      {"role": "developer", "content": "You are a helpful assistant."},
                      {"role": "user", "content": "Hello!"}
                    ],
                    stream: true,
                  });

                  for await (const chunk of completion) {
                    console.log(chunk.choices[0].delta.content);
                  }
                }

                main();
              python: |
                from openai import OpenAI
                client = OpenAI()

                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=[
                    {"role": "developer", "content": "You are a helpful assistant."},
                    {"role": "user", "content": "Hello!"}
                  ],
                  stream=True
                )

                for chunk in completion:
                  print(chunk.choices[0].delta)
            response: |
              {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

              {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

              ....

              {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
            title: Streaming
          - request:
              csharp: |
                using System;
                using System.Collections.Generic;

                using OpenAI.Chat;

                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                ChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(
                    functionName: "get_current_weather",
                    functionDescription: "Get the current weather in a given location",
                    functionParameters: BinaryData.FromString("""
                        {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "description": "The city and state, e.g. San Francisco, CA"
                                },
                                "unit": {
                                    "type": "string",
                                    "enum": [ "celsius", "fahrenheit" ]
                                }
                            },
                            "required": [ "location" ]
                        }
                    """)
                );

                List<ChatMessage> messages =
                [
                    new UserChatMessage("What's the weather like in Boston today?"),
                ];

                ChatCompletionOptions options = new()
                {
                    Tools =
                    {
                        getCurrentWeatherTool
                    },
                    ToolChoice = ChatToolChoice.CreateAutoChoice(),
                };

                ChatCompletion completion = client.CompleteChat(messages, options);
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "gpt-4.1",
                  "messages": [
                    {
                      "role": "user",
                      "content": "What is the weather like in Boston today?"
                    }
                  ],
                  "tools": [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                              "type": "string",
                              "enum": ["celsius", "fahrenheit"]
                            }
                          },
                          "required": ["location"]
                        }
                      }
                    }
                  ],
                  "tool_choice": "auto"
                }'
              node.js: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                async function main() {
                  const messages = [{"role": "user", "content": "What's the weather like in Boston today?"}];
                  const tools = [
                      {
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "description": "Get the current weather in a given location",
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "location": {
                                "type": "string",
                                "description": "The city and state, e.g. San Francisco, CA",
                              },
                              "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                            },
                            "required": ["location"],
                          },
                        }
                      }
                  ];

                  const response = await openai.chat.completions.create({
                    model: "gpt-4.1",
                    messages: messages,
                    tools: tools,
                    tool_choice: "auto",
                  });

                  console.log(response);
                }

                main();
              python: |
                from openai import OpenAI
                client = OpenAI()

                tools = [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA",
                          },
                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                        },
                        "required": ["location"],
                      },
                    }
                  }
                ]
                messages = [{"role": "user", "content": "What's the weather like in Boston today?"}]
                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=messages,
                  tools=tools,
                  tool_choice="auto"
                )

                print(completion)
            response: |
              {
                "id": "chatcmpl-abc123",
                "object": "chat.completion",
                "created": 1699896916,
                "model": "gpt-4o-mini",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": null,
                      "tool_calls": [
                        {
                          "id": "call_abc123",
                          "type": "function",
                          "function": {
                            "name": "get_current_weather",
                            "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                          }
                        }
                      ]
                    },
                    "logprobs": null,
                    "finish_reason": "tool_calls"
                  }
                ],
                "usage": {
                  "prompt_tokens": 82,
                  "completion_tokens": 17,
                  "total_tokens": 99,
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                }
              }
            title: Functions
          - request:
              csharp: |
                using System;
                using System.Collections.Generic;

                using OpenAI.Chat;

                ChatClient client = new(
                    model: "gpt-4.1",
                    apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
                );

                List<ChatMessage> messages =
                [
                    new UserChatMessage("Hello!")
                ];

                ChatCompletionOptions options = new()
                {
                    IncludeLogProbabilities = true,
                    TopLogProbabilityCount = 2
                };

                ChatCompletion completion = client.CompleteChat(messages, options);

                Console.WriteLine(completion.Content[0].Text);
              curl: |
                curl https://api.openai.com/v1/chat/completions \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                    "model": "VAR_chat_model_id",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Hello!"
                      }
                    ],
                    "logprobs": true,
                    "top_logprobs": 2
                  }'
              node.js: |
                import OpenAI from "openai";

                const openai = new OpenAI();

                async function main() {
                  const completion = await openai.chat.completions.create({
                    messages: [{ role: "user", content: "Hello!" }],
                    model: "VAR_chat_model_id",
                    logprobs: true,
                    top_logprobs: 2,
                  });

                  console.log(completion.choices[0]);
                }

                main();
              python: |
                from openai import OpenAI
                client = OpenAI()

                completion = client.chat.completions.create(
                  model="VAR_chat_model_id",
                  messages=[
                    {"role": "user", "content": "Hello!"}
                  ],
                  logprobs=True,
                  top_logprobs=2
                )

                print(completion.choices[0].message)
                print(completion.choices[0].logprobs)
            response: |
              {
                "id": "chatcmpl-123",
                "object": "chat.completion",
                "created": 1702685778,
                "model": "gpt-4o-mini",
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "role": "assistant",
                      "content": "Hello! How can I assist you today?"
                    },
                    "logprobs": {
                      "content": [
                        {
                          "token": "Hello",
                          "logprob": -0.31725305,
                          "bytes": [72, 101, 108, 108, 111],
                          "top_logprobs": [
                            {
                              "token": "Hello",
                              "logprob": -0.31725305,
                              "bytes": [72, 101, 108, 108, 111]
                            },
                            {
                              "token": "Hi",
                              "logprob": -1.3190403,
                              "bytes": [72, 105]
                            }
                          ]
                        },
                        {
                          "token": "!",
                          "logprob": -0.02380986,
                          "bytes": [
                            33
                          ],
                          "top_logprobs": [
                            {
                              "token": "!",
                              "logprob": -0.02380986,
                              "bytes": [33]
                            },
                            {
                              "token": " there",
                              "logprob": -3.787621,
                              "bytes": [32, 116, 104, 101, 114, 101]
                            }
                          ]
                        },
                        {
                          "token": " How",
                          "logprob": -0.000054669687,
                          "bytes": [32, 72, 111, 119],
                          "top_logprobs": [
                            {
                              "token": " How",
                              "logprob": -0.000054669687,
                              "bytes": [32, 72, 111, 119]
                            },
                            {
                              "token": "<|end|>",
                              "logprob": -10.953937,
                              "bytes": null
                            }
                          ]
                        },
                        {
                          "token": " can",
                          "logprob": -0.015801601,
                          "bytes": [32, 99, 97, 110],
                          "top_logprobs": [
                            {
                              "token": " can",
                              "logprob": -0.015801601,
                              "bytes": [32, 99, 97, 110]
                            },
                            {
                              "token": " may",
                              "logprob": -4.161023,
                              "bytes": [32, 109, 97, 121]
                            }
                          ]
                        },
                        {
                          "token": " I",
                          "logprob": -3.7697225e-6,
                          "bytes": [
                            32,
                            73
                          ],
                          "top_logprobs": [
                            {
                              "token": " I",
                              "logprob": -3.7697225e-6,
                              "bytes": [32, 73]
                            },
                            {
                              "token": " assist",
                              "logprob": -13.596657,
                              "bytes": [32, 97, 115, 115, 105, 115, 116]
                            }
                          ]
                        },
                        {
                          "token": " assist",
                          "logprob": -0.04571125,
                          "bytes": [32, 97, 115, 115, 105, 115, 116],
                          "top_logprobs": [
                            {
                              "token": " assist",
                              "logprob": -0.04571125,
                              "bytes": [32, 97, 115, 115, 105, 115, 116]
                            },
                            {
                              "token": " help",
                              "logprob": -3.1089056,
                              "bytes": [32, 104, 101, 108, 112]
                            }
                          ]
                        },
                        {
                          "token": " you",
                          "logprob": -5.4385737e-6,
                          "bytes": [32, 121, 111, 117],
                          "top_logprobs": [
                            {
                              "token": " you",
                              "logprob": -5.4385737e-6,
                              "bytes": [32, 121, 111, 117]
                            },
                            {
                              "token": " today",
                              "logprob": -12.807695,
                              "bytes": [32, 116, 111, 100, 97, 121]
                            }
                          ]
                        },
                        {
                          "token": " today",
                          "logprob": -0.0040071653,
                          "bytes": [32, 116, 111, 100, 97, 121],
                          "top_logprobs": [
                            {
                              "token": " today",
                              "logprob": -0.0040071653,
                              "bytes": [32, 116, 111, 100, 97, 121]
                            },
                            {
                              "token": "?",
                              "logprob": -5.5247097,
                              "bytes": [63]
                            }
                          ]
                        },
                        {
                          "token": "?",
                          "logprob": -0.0008108172,
                          "bytes": [63],
                          "top_logprobs": [
                            {
                              "token": "?",
                              "logprob": -0.0008108172,
                              "bytes": [63]
                            },
                            {
                              "token": "?\n",
                              "logprob": -7.184561,
                              "bytes": [63, 10]
                            }
                          ]
                        }
                      ]
                    },
                    "finish_reason": "stop"
                  }
                ],
                "usage": {
                  "prompt_tokens": 9,
                  "completion_tokens": 9,
                  "total_tokens": 18,
                  "completion_tokens_details": {
                    "reasoning_tokens": 0,
                    "accepted_prediction_tokens": 0,
                    "rejected_prediction_tokens": 0
                  }
                },
                "system_fingerprint": null
              }
            title: Logprobs
        group: chat
        name: Create chat completion
        path: create
        returns: |
          Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.
security:
  - ApiKeyAuth: []
servers:
  - url: https://api.openai.com/v1
tags:
  - description: Build Assistants that can call models and use tools.
    name: Assistants
  - description: Turn audio into text or text into audio.
    name: Audio
  - description: Given a list of messages comprising a conversation, the model will return a response.
    name: Chat
  - description: Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
    name: Completions
  - description: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
    name: Embeddings
  - description: Manage and run evals in the OpenAI platform.
    name: Evals
  - description: Manage fine-tuning jobs to tailor a model to your specific training data.
    name: Fine-tuning
  - description: Create large batches of API requests to run asynchronously.
    name: Batch
  - description: Files are used to upload documents that can be used with features like Assistants and Fine-tuning.
    name: Files
  - description: Use Uploads to upload large files in multiple parts.
    name: Uploads
  - description: Given a prompt and/or an input image, the model will generate a new image.
    name: Images
  - description: List and describe the various models available in the API.
    name: Models
  - description: Given text and/or image inputs, classifies if those inputs are potentially harmful.
    name: Moderations
  - description: List user actions and configuration changes within this organization.
    name: Audit Logs
